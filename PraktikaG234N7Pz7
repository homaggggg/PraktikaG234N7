#!/usr/bin/env python
# coding: utf-8

# In[1]:


tribonacciNumbersCache = []
def tribonacciNumber(n):
    if n == 1 or n == 2: return 0
    elif n == 3: return 1
    if (n in tribonacciNumbersCache): return tribonacciNumbersCache[n]
    
    nTribonacciNumber = tribonacciNumber(n - 1) + tribonacciNumber(n - 2) + tribonacciNumber(n - 3)

    tribonacciNumbersCache[n] = nTribonacciNumber
    return nTribonacciNumber


# In[4]:


tribonacciNumbersCache = [0, 0, 1]
for i in range(3, 99):
    tribonacciNumbersCache.append(tribonacciNumbersCache[i - 1] + tribonacciNumbersCache[i - 2] + tribonacciNumbersCache[i - 3])

tribonacciNumbers = [73, 10, 4, 15, 20, 7];
tribonacciNumbersValue = [];
for number in tribonacciNumbers:
    tribonacciNumbersValue.append(tribonacciNumbersCache[number - 1])
print(tribonacciNumbersValue)


# In[6]:


def maxSubArraySum(arr,size):
    
    max_till_now = arr[0]
    max_ending = 0
    
    for i in range(0, size):
        max_ending = max_ending + arr[i]
        if max_ending < 0:
            max_ending = 0
        
        
        elif (max_till_now < max_ending):
            max_till_now = max_ending
            
    return max_till_now


# In[8]:


def maxSubArraySum(nums):
    arrayOfSums = [nums[0]]
    maxSum = nums[0];
    for i in range(1, len(nums) - 1):
        if (arrayOfSums[i - 1] > 0):
            arrayOfSums.append(arrayOfSums[i - 1] + nums[i]);
        else:
            arrayOfSums.append(nums[i])
        if (arrayOfSums[i] > maxSum):
            maxSum = arrayOfSums[i]
     
    return maxSum;

sourceArray = [2, -5, 2, 2, -1, 3, -1, 2, -5, 4]
print(maxSubArraySum(sourceArray))


# In[20]:


def maxSubArray(nums):
    arrayOfSums = [nums[0]]
    maxSum = nums[0]
    maxPosition = 0
    for i in range(1, len(nums)-1): 
        if (arrayOfSums[i - 1] > 0):
            arrayOfSums.append(arrayOfSums[i - 1] + nums[i])
        else:
            arrayOfSums.append(nums[i])
        
        if (arrayOfSums[i] > maxSum):
            maxSum = arrayOfSums[i];
            maxPosition = i;
    
    if (maxSum < 0):
        return nums[maxPosition]
    
    endOfMaxSubarray = maxPosition
    startOfMaxSubarray = endOfMaxSubarray
    
    while startOfMaxSubarray >= 0 and arrayOfSums[startOfMaxSubarray] >= 0: startOfMaxSubarray-=1
    
    return nums[startOfMaxSubarray + 1:endOfMaxSubarray + 1]

sourceArray = [2, -5, 2, 2, -1, 3, -1, 2, -5, 4]
print(maxSubArray(sourceArray))


# In[ ]:




